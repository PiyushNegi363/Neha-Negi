const hamburger = document.querySelector('.hamburger'), navMenu = document.querySelector('.nav-menu'); function toggleMobileNav() { hamburger.classList.toggle('active'), navMenu.classList.toggle('active') } hamburger.addEventListener('click', toggleMobileNav), hamburger.addEventListener('touchstart', e => { e.preventDefault(), toggleMobileNav() }), document.querySelectorAll('.nav-link').forEach(n => { n.addEventListener('click', () => { hamburger.classList.remove('active'), navMenu.classList.remove('active') }), n.addEventListener('touchend', () => { hamburger.classList.remove('active'), navMenu.classList.remove('active') }) }); let touchStartX = 0, touchEndX = 0; document.addEventListener('touchstart', e => { touchStartX = e.changedTouches[0].screenX }), document.addEventListener('touchend', e => { touchEndX = e.changedTouches[0].screenX, handleSwipe() }); function handleSwipe() { const swipeThreshold = 100, swipeDistance = touchEndX - touchStartX; swipeDistance > swipeThreshold && !navMenu.classList.contains('active') ? toggleMobileNav() : swipeDistance < -swipeThreshold && navMenu.classList.contains('active') && toggleMobileNav() } document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function (e) { e.preventDefault(); const target = document.querySelector(this.getAttribute('href')); target && target.scrollIntoView({ behavior: 'smooth', block: 'start' }) }) }); let ticking = !1; function updateNavbar() { const navbar = document.querySelector('.navbar'); window.scrollY > 100 ? (navbar.style.background = 'rgba(42, 45, 53, 0.98)', navbar.style.boxShadow = '0 2px 20px rgba(0, 0, 0, 0.3)') : (navbar.style.background = 'rgba(42, 45, 53, 0.95)', navbar.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)'), ticking = !1 } window.addEventListener('scroll', () => { ticking || (requestAnimationFrame(updateNavbar), ticking = !0) }); const observerOptions = { threshold: .1, rootMargin: '0px 0px -50px 0px' }, observer = new IntersectionObserver(entries => { entries.forEach(entry => { entry.isIntersecting && entry.target.classList.add('animate') }) }, observerOptions); document.querySelectorAll('.scroll-animate-left,.scroll-animate-right,.scroll-animate-scale,.scroll-animate-stagger,.scroll-animate-rotate').forEach(el => { observer.observe(el) }); const coords = { x: 0, y: 0 }, circles = document.querySelectorAll('.cursor-follower,.cursor-dot'); circles.forEach(function (circle) { circle.x = 0, circle.y = 0 }); function animateCircles() { let x = coords.x, y = coords.y; circles.forEach(function (circle, index) { circle.style.left = x - 12 + 'px', circle.style.top = y - 12 + 'px', circle.style.transform = `scale(${(circles.length - index) / circles.length})`, circle.x = x, circle.y = y; const nextCircle = circles[index + 1] || circles[0]; x += (nextCircle.x - x) * .3, y += (nextCircle.y - y) * .3 }); requestAnimationFrame(animateCircles) } animateCircles(), window.addEventListener('mousemove', function (e) { coords.x = e.clientX, coords.y = e.clientY }), document.addEventListener('mouseenter', function () { circles.forEach(circle => { circle.style.opacity = '1' }) }), document.addEventListener('mouseleave', function () { circles.forEach(circle => { circle.style.opacity = '0' }) }); (function () { emailjs.init('YOUR_PUBLIC_KEY') })(), document.getElementById('contactForm').addEventListener('submit', function (event) { event.preventDefault(); const form = event.target, submitBtn = form.querySelector('button[type="submit"]'), originalText = submitBtn.textContent; submitBtn.textContent = 'Sending...', submitBtn.disabled = !0, emailjs.sendForm('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', form).then(function () { alert('Message sent successfully!'), form.reset() }, function (error) { console.error('Failed to send message:', error), alert('Failed to send message. Please try again.') }).finally(function () { submitBtn.textContent = originalText, submitBtn.disabled = !1 }) });
